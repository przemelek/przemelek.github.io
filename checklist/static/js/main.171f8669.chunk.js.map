{"version":3,"sources":["logo.svg","Checklist.js","StorageService.js","List.js","View.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Checklist","elems","id","Math","random","Date","items","this","props","edit","t","i","length","rows","cols","value","onClick","save","label","type","for","push","Checkbox","name","to","Component","StorageService","checklists","list","List","getCheclists","View","location","pathname","substring","toString","lastIndexOf","console","log","item","getChecklist","App","window","path","component","exact","from","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.171f8669.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport {Component} from \"react\";\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {Link} from \"react-router-dom\";\n\n\nexport class Checklist extends Component {\n\n    save() {\n\n    }\n\n    render() {\n        var elems = [];\n        var id = Math.random()+new Date()\n        var items = this.props.items||[];\n        // var text = encodeURIComponent(JSON.stringify(items));\n        if (this.props.edit) {\n            var t=\"\";\n            for (var i=0; i<items.length; i++) t+=items[i]+\"\\n\";\n            return <div><textarea rows={20} cols={50} value={t}></textarea><br /><button onClick={this.save}>Save</button></div>\n        } else {\n            for (var i = 0; i < items.length; i++) {\n                var label = items[i];\n                if (this.props.edit) {\n                    label = <input type=\"text\" value={label}></input>;\n                } else {\n                    label = <label for={id + \"item_\" + i}>{label}</label>\n                }\n                elems.push(<div><Checkbox id={id + \"item_\" + i} label={\"item \" + i}></Checkbox>{label}</div>)\n            }\n            return <div><h1>{this.props.name}</h1>{elems}<br /><Link to=\"/list\">&lt;&lt; Back</Link></div>;\n        }\n    }\n}","\nexport class StorageService {\n\n    checklists() {\n        return [\n        {\n            name: \"Poranek\",\n            id: \"poranek\",\n            items: [\"Łóżko pościelić\",\"Ogolić się\",\"Umyć zęby\",\"Umyć twarz\",\"Ubrać \\\"wyjściową\\\" koszulkę\"]\n        },\n        {\n            name: \"Bad day\",\n            id: \"badDay\",\n            items: [\"Czy mnie coś boli?\",\"Gonitwa myśli? -> journaling\",\"Dość światła?\",\"Jestem głodny? Albo czy coś w ogóle jadłem?\",\"Chce mi się pić?\",\"Czy jestem zmęczony?\",\"Czy odpowiednio długo spałem?\",\"Czy to kolejny dzień z małą ilością snu?\"]\n        },\n        {\n            name: \"Koniec pracy\",\n            id: \"endOfDay\",\n            items: [\"Update ToDo - co zrobiłem, co na jutro\",\"commit?\",\"zamknąć laptopa\"]\n        }\n        ];\n    }\n\n    getCheclists() {\n        return this.checklists();\n    }\n\n    getChecklist(id) {\n        var list = this.checklists();\n        for (var i=0; i<list.length; i++) {\n            if (list[i].id==id) return list[i];\n        }\n        return null;\n    }\n\n}","import React from 'react';\nimport {Component} from \"react\";\nimport {StorageService} from \"./StorageService\";\nimport {Link} from \"react-router-dom\";\n\nexport class List extends Component {\n    render() {\n        var list = new StorageService().getCheclists();\n        var elems = [];\n        for (var i=0; i<list.length; i++) {\n            elems.push(<div><Link to={\"/view/\"+list[i].id}><h2>{list[i].name}</h2></Link></div>);\n        }\n        return <div id=\"list\">Available checklists:<br />{elems}</div>;\n    }\n}","import React from 'react';\nimport {Component} from \"react\";\nimport {Checklist} from \"./Checklist\";\nimport {StorageService} from \"./StorageService\";\n\nexport class View extends Component {\n    render() {\n        var location = this.props.location.pathname;\n        var id = location.substring(location.toString().lastIndexOf(\"/\")+1);\n        console.log(\"====\");\n        console.log(this.props.location);\n        console.log(id);\n        var item = new StorageService().getChecklist(id);\n        console.log(item);\n        var name = item.name;\n        var items = item.items;\n\n        return (\n            <div>\n                <Checklist name={name} items={items}/>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {Checklist} from \"./Checklist\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link, BrowserRouter, HashRouter, Redirect\n} from \"react-router-dom\";\nimport {List} from \"./List\";\nimport {View} from \"./View\";\n\nfunction App() {\n    console.log(\"App \"+window.location);\n  return (\n      <div>\n      <HashRouter>\n          <Switch>\n              <Route path=\"/list\" component={List}/>\n              <Route path=\"/view/:id\" component={View}/>\n              <Redirect exact from=\"/\" to=\"/list\"/>\n          </Switch>\n      </HashRouter>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}